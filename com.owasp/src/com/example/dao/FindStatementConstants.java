/* Generated By:JavaCC: Do not edit this line. FindStatementConstants.java */
package com.example.dao;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface FindStatementConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int STRING_LITERAL = 1;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 7;
  /** RegularExpression Id. */
  int FORMAL_COMMENT = 8;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 9;
  /** RegularExpression Id. */
  int BLOCK_COMMENT = 12;
  /** RegularExpression Id. */
  int LPAREN = 13;
  /** RegularExpression Id. */
  int RPAREN = 14;
  /** RegularExpression Id. */
  int LBRACE = 15;
  /** RegularExpression Id. */
  int RBRACE = 16;
  /** RegularExpression Id. */
  int LBRACKET = 17;
  /** RegularExpression Id. */
  int RBRACKET = 18;
  /** RegularExpression Id. */
  int SEMICOLON = 19;
  /** RegularExpression Id. */
  int COMMA = 20;
  /** RegularExpression Id. */
  int DOT = 21;
  /** RegularExpression Id. */
  int ABSTRACT = 22;
  /** RegularExpression Id. */
  int BOOLEAN = 23;
  /** RegularExpression Id. */
  int BREAK = 24;
  /** RegularExpression Id. */
  int BYTE = 25;
  /** RegularExpression Id. */
  int CASE = 26;
  /** RegularExpression Id. */
  int CATCH = 27;
  /** RegularExpression Id. */
  int CHAR = 28;
  /** RegularExpression Id. */
  int CLASS = 29;
  /** RegularExpression Id. */
  int CONST = 30;
  /** RegularExpression Id. */
  int CONTINUE = 31;
  /** RegularExpression Id. */
  int _DEFAULT = 32;
  /** RegularExpression Id. */
  int DO = 33;
  /** RegularExpression Id. */
  int DOUBLE = 34;
  /** RegularExpression Id. */
  int ELSE = 35;
  /** RegularExpression Id. */
  int EXTENDS = 36;
  /** RegularExpression Id. */
  int FALSE = 37;
  /** RegularExpression Id. */
  int FINAL = 38;
  /** RegularExpression Id. */
  int FINALLY = 39;
  /** RegularExpression Id. */
  int FLOAT = 40;
  /** RegularExpression Id. */
  int FOR = 41;
  /** RegularExpression Id. */
  int GOTO = 42;
  /** RegularExpression Id. */
  int IF = 43;
  /** RegularExpression Id. */
  int IMPLEMENTS = 44;
  /** RegularExpression Id. */
  int IMPORT = 45;
  /** RegularExpression Id. */
  int INSTANCEOF = 46;
  /** RegularExpression Id. */
  int INT = 47;
  /** RegularExpression Id. */
  int INTERFACE = 48;
  /** RegularExpression Id. */
  int LONG = 49;
  /** RegularExpression Id. */
  int NATIVE = 50;
  /** RegularExpression Id. */
  int NEW = 51;
  /** RegularExpression Id. */
  int NULL = 52;
  /** RegularExpression Id. */
  int PACKAGE = 53;
  /** RegularExpression Id. */
  int PRIVATE = 54;
  /** RegularExpression Id. */
  int PROTECTED = 55;
  /** RegularExpression Id. */
  int PUBLIC = 56;
  /** RegularExpression Id. */
  int RETURN = 57;
  /** RegularExpression Id. */
  int SHORT = 58;
  /** RegularExpression Id. */
  int STATIC = 59;
  /** RegularExpression Id. */
  int SUPER = 60;
  /** RegularExpression Id. */
  int SWITCH = 61;
  /** RegularExpression Id. */
  int SYNCHRONIZED = 62;
  /** RegularExpression Id. */
  int THIS = 63;
  /** RegularExpression Id. */
  int THROW = 64;
  /** RegularExpression Id. */
  int THROWS = 65;
  /** RegularExpression Id. */
  int TRANSIENT = 66;
  /** RegularExpression Id. */
  int TRUE = 67;
  /** RegularExpression Id. */
  int TRY = 68;
  /** RegularExpression Id. */
  int VOID = 69;
  /** RegularExpression Id. */
  int VOLATILE = 70;
  /** RegularExpression Id. */
  int WHILE = 71;
  /** RegularExpression Id. */
  int IDENTIFIER = 72;
  /** RegularExpression Id. */
  int LETTER = 73;
  /** RegularExpression Id. */
  int DIGIT = 74;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_BLOCK_COMMENT = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<STRING_LITERAL>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "<SINGLE_LINE_COMMENT>",
    "<FORMAL_COMMENT>",
    "<MULTI_LINE_COMMENT>",
    "\"/*\"",
    "<token of kind 11>",
    "\"*/\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"abstract\"",
    "\"boolean\"",
    "\"break\"",
    "\"byte\"",
    "\"case\"",
    "\"catch\"",
    "\"char\"",
    "\"class\"",
    "\"const\"",
    "\"continue\"",
    "\"default\"",
    "\"do\"",
    "\"double\"",
    "\"else\"",
    "\"extends\"",
    "\"false\"",
    "\"final\"",
    "\"finally\"",
    "\"float\"",
    "\"for\"",
    "\"goto\"",
    "\"if\"",
    "\"implements\"",
    "\"import\"",
    "\"instanceof\"",
    "\"int\"",
    "\"interface\"",
    "\"long\"",
    "\"native\"",
    "\"new\"",
    "\"null\"",
    "\"package\"",
    "\"private\"",
    "\"protected\"",
    "\"public\"",
    "\"return\"",
    "\"short\"",
    "\"static\"",
    "\"super\"",
    "\"switch\"",
    "\"synchronized\"",
    "\"this\"",
    "\"throw\"",
    "\"throws\"",
    "\"transient\"",
    "\"true\"",
    "\"try\"",
    "\"void\"",
    "\"volatile\"",
    "\"while\"",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "\"@\"",
    "\"*\"",
    "\"+=\"",
    "\"=\"",
    "\"String\"",
    "\"PreparedStatement\"",
    "\"Statement\"",
    "\"ResultSet\"",
    "\"+\"",
  };

}
